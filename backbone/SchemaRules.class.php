<?php
/**
 * Backbone.php
 * 
 * @author	James Tracy <james.a.tracy@gmail.com>
 * @copyright	2012-2013
 * @license   http://www.opensource.org/licenses/mit-license.php MIT
 */

Backbone::uses("DataType");

/**
 * Extend Schema.class by adding custom validation rules.
 *
 * Built-in rules include:
 * "required" => true: field is required (cannot be empty)
 * "numeric" => true: field must be numeric (0-9 chars only)
 * "email" => true: validate email address
 * "url" => true: validate url (with path)
 * "min" => value: require a minium value for a field
 * "max" => value: require a maximum value for a field
 * "minlength" => value: require a minimum length for a (string)
 * "maxlength" => value: require a maximum length for a (string)
 * "enum" => array(): value must in the given array
 * "binary" => true: value is either 0 or 1
 *
 * @since 0.1.0
 */
class SchemaRules
{
	/* An array of rules and function callbacks to invoke for that rule */
	protected static $_rules = array(
		"required" => array("SchemaRules", "required"),
		"numeric" => array("SchemaRules", "numeric"),
		"email" => array("SchemaRules", "email"),
		"url" => array("SchemaRules", "url"),
		"min" => array("SchemaRules", "min"),
		"max" => array("SchemaRules", "max"),
		"minlength" => array("SchemaRules", "minlength"),
		"maxlength" => array("SchemaRules", "maxlength"),
		"enum" => array("SchemaRules", "enum"),
		"binary" => array("SchemaRules", "binary")
	);
	
	/* The error message generated by an error condition */
	public static $last_error = "";
	
	/*
	Add a new rule
	
	@param [string] $rule The name of the rule. Must be unique.
	@param [array] $callable A valid callback for call_user_func()
	*/
	public static function addRule($rule, $callable)
	{
		self::$_rules[$rule] = $callable;
	}
	
	/* 
	Invoke a rule, if it exists 
	
	@param [string] $rule The name of the rule - corresponds to the static method name
	@param [string] $name The name of the field being validated
	@param [string] $value The value of the field
	@param [mixed] $args Any additional args for the validator
	@return [boolean] True if the field validates, false otherwise, null if the rule was not found
	*/
	public static function invoke($rule, $name, $value, $args = null)
	{
		if(isset(self::$_rules[$rule]))
		{
			$result = call_user_func_array(self::$_rules[$rule], array($name, $value, $args));
			return $result;
		}
		return null;
	}
	
	/* 
	Check for a value that is not null, undefined, or empty
		Ex: bob@example.com
	
	@param [string] $name The name of the field being validated
	@param [string] $value The value of the field
	@param [mixed] $args Any additional args for the validator
	@return [boolean] True if the field validates, false otherwise
	*/
	public static function required($name, $value, $args)
	{
		if(is_numeric($value) && $value !== "")
			return true; // accept 0 and 0.00 as valid values
		if(empty($value))
		{
			self::$last_error = "Required field: `".$name."`";
			return false;
		}
		return true;
	}
	
	/* 
	String must be numeric
	
	@param [string] $name The name of the field being validated
	@param [string] $value The value of the field
	@param [mixed] $args Any additional args for the validator
	@return [boolean] True if the field validates, false otherwise
	*/
	public static function numeric($name, $value, $args)
	{
		if(!empty($value))
		{
			if(!is_numeric($value))
			{
				self::$last_error = "Invalid `".$name."`: ".DataType::export($value)." is not numeric";
				return false;
			}
		}
		return true;
	}
	
	/* 
	Validate an email address 
		Ex: bob@example.com
	
	@param [string] $name The name of the field being validated
	@param [string] $value The value of the field
	@param [mixed] $args Any additional args for the validator
	@return [boolean] True if the field validates, false otherwise
	*/
	public static function email($name, $value, $args)
	{
		if(!empty($value))
		{
			if(!filter_var($value, FILTER_VALIDATE_EMAIL))
			{
				self::$last_error = "Invalid email address `".$name."`: ".DataType::export($value);
				return false;
			}
		}
		return true;
	}
	
	/* 
	Validate an url (with path)
		Ex: http://example.com
	
	@param [string] $name The name of the field being validated
	@param [string] $value The value of the field
	@param [mixed] $args Any additional args for the validator
	@return [boolean] True if the field validates, false otherwise
	*/
	public static function url($name, $value, $args)
	{
		if(!empty($value))
		{
			if(!filter_var($value, FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED))
			{
				self::$last_error = "Invalid url `".$name."`: ".DataType::export($value);
				return false;
			}
		}
		return true;
	}
	
	/* 
	Require a minimum value
		Ex: "min" => 0
	
	@param [string] $name The name of the field being validated
	@param [string] $value The value of the field
	@param [mixed] $args Any additional args for the validator
	@return [boolean] True if the field validates, false otherwise
	*/
	public static function min($name, $value, $args)
	{
		if(!empty($value) || $value == 0)
		{
			if(intval($value) < $args)
			{
				self::$last_error = "Out of bounds error `".$name."`: ".DataType::export($value)." is less than ".$args;
				return false;
			}
		}
		return true;
	}
	
	/* 
	Require a maximum value
		Ex: "max" => 25
	
	@param [string] $name The name of the field being validated
	@param [string] $value The value of the field
	@param [mixed] $args Any additional args for the validator
	@return [boolean] True if the field validates, false otherwise
	*/
	public static function max($name, $value, $args)
	{
		if(!empty($value) || $value == 0)
		{
			if(intval($value) > $args)
			{
				self::$last_error = "Out of bounds error `".$name."`: ".DataType::export($value)." is greater than ".$args;
				return false;
			}
		}
		return true;
	}
	
	/* 
	Require a minimum string length
		Ex: "minlength" => 10
	
	@param [string] $name The name of the field being validated
	@param [string] $value The value of the field
	@param [mixed] $args Any additional args for the validator
	@return [boolean] True if the field validates, false otherwise
	*/
	public static function minlength($name, $value, $args)
	{
		if(!empty($value) && is_string($value))
		{
			if(strlen($value) < $args)
			{
				self::$last_error = "String length error `".$name."`: ".DataType::export($value)." is less than ".$args;
				return false;
			}
		}
		return true;
	}
	
	/* 
	Require a maximum string length
		Ex: "maxlength" => 10
	
	@param [string] $name The name of the field being validated
	@param [string] $value The value of the field
	@param [mixed] $args Any additional args for the validator
	@return [boolean] True if the field validates, false otherwise
	*/
	public static function maxlength($name, $value, $args)
	{
		if(!empty($value) && is_string($value))
		{
			if(strlen($value) > $args)
			{
				self::$last_error = "String length error `".$name."`: ".DataType::export($value)." is greater than ".$args;
				return false;
			}
		}
		return true;
	}
	
	/* 
	Value must be in the given array
		Ex: "enum" => array(1, 2, 3, "apple")
	
	@param [string] $name The name of the field being validated
	@param [string] $value The value of the field
	@param [mixed] $args Any additional args for the validator
	@return [boolean] True if the field validates, false otherwise
	*/
	public static function enum($name, $value, $args)
	{
		if(!empty($value))
		{
			if(!in_array($value, $args))
			{
				self::$last_error = "Error `".$name."`: ".DataType::export($value)." must be one of [".join(", ", $args)."]";
				return false;
			}
		}
		return true;
	}
	
	/* 
	Value is either 0 or 1
	
	@param [string] $name The name of the field being validated
	@param [string] $value The value of the field
	@param [mixed] $args Any additional args for the validator
	@return [boolean] True if the field validates, false otherwise
	*/
	public static function binary($name, $value, $args)
	{
		return SchemaRules::enum($name, $value, array("0", "1"));
	}
};

?>