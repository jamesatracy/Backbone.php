<?php
/**
 * Backbone.php
 * 
 * @author	James Tracy <james.a.tracy@gmail.com>
 * @copyright	2012-2013
 * @license   http://www.opensource.org/licenses/mit-license.php MIT
 * @link https://github.com/jamesatracy/Backbone.php GitHub Page
 */

/**
 * Valdiation class for testing values against validation rules.
 * Formerly class "SchemaRules"
 *
 * Built-in rules include:
 * "required" => true: field is required (cannot be empty)
 * "numeric" => true: field must be numeric (0-9 chars only)
 * "email" => true: validate email address
 * "url" => true: validate url (with path)
 * "min" => value: require a minium value for a field
 * "max" => value: require a maximum value for a field
 * "minlength" => value: require a minimum length for a (string)
 * "maxlength" => value: require a maximum length for a (string)
 * "enum" => array(): value must in the given array
 * "binary" => true: value is either 0 or 1
 *
 * Note that all rules, except required, will validate if the value
 * is empty. In other words, it assumes that the rule applies only
 * if a value is present. The required rule should be used to catch
 * cases where a value should never be empty and then combined with
 * any of these additional rules.
 *
 * @since 0.1.0
 */
class Validate
{
	/** @var array An array of rules and function callbacks to invoke for that rule */
	protected static $_rules = array(
		"required" => array("Validate", "required"),
		"numeric" => array("Validate", "numeric"),
		"email" => array("Validate", "email"),
		"url" => array("Validate", "url"),
		"min" => array("Validate", "min"),
		"max" => array("Validate", "max"),
		"minlength" => array("Validate", "minlength"),
		"maxlength" => array("Validate", "maxlength"),
		"enum" => array("Validate", "enum"),
		"binary" => array("Validate", "binary")
	);
	
	/** @var string The error message generated by an error condition */
	public static $last_error = "";
	
	/**
	 * Add a new rule
	 *
	 * @since 0.1.0
	 * @param string $rule The name of the rule. Must be unique.
	 * @param [array] $callable A valid callback for call_user_func()
	 */
	public static function addRule($rule, $callable)
	{
		self::$_rules[$rule] = $callable;
	}
	
	/**
	 * Invoke a rule, if it exists.
	 *
	 * Note that if the value is empty then the rule will be skipped and invoke
	 * will return true (valid), unless the rule being invoked is "required".
	 *
	 * @since 0.1.0
	 * @param string $rule The name of the rule - corresponds to the static method name
	 * @param string $name The name of the field being validated
	 * @param string $value The value of the field
	 * @param mixed $args Any additional args for the validator
	 * @return bool|null True if the field validates, false otherwise, null if the rule was not found
	*/
	public static function invoke($rule, $name, $value, $args = null)
	{
		if(isset(self::$_rules[$rule])) {
			// skip if the value is empty and the rule is not "required"
			if($rule !== "required" && empty($value)) {
				return true;
			}
			$result = call_user_func_array(self::$_rules[$rule], array($name, $value, $args));
			return $result;
		}
		return null;
	}
	
	/**
	 * Check for a value that is not null, undefined, or empty
	 *	Ex: bob@example.com
	 *
	 * @since 0.1.0
	 * @param string $name The name of the field being validated
	 * @param string $value The value of the field
	 * @param mixed $args Any additional args for the validator
	 * @return bool True if the field validates, false otherwise
	 */
	public static function required($name, $value, $args = null)
	{
		if(is_numeric($value) && $value !== "") {
			return true; // accept 0 and 0.00 as valid values
		}
		if(empty($value)) {
			self::$last_error = "Required field: `".$name."`";
			return false;
		}
		return true;
	}
	
	/**
	 * String must be numeric
	 *
	 * @since 0.1.0
	 * @param string $name The name of the field being validated
	 * @param string $value The value of the field
	 * @param mixed $args Any additional args for the validator
	 * @return bool True if the field validates, false otherwise
	 */
	public static function numeric($name, $value, $args = null)
	{
		if(!is_numeric($value)) {
			self::$last_error = "Invalid `".$name."`: ".Backbone::dump($value)." is not numeric";
			return false;
		}
		return true;
	}
	
	/**
	 * Validate an email address 
	 *	Ex: bob@example.com
	 *
	 * @since 0.1.0
	 * @param string $name The name of the field being validated
	 * @param string $value The value of the field
	 * @param mixed $args Any additional args for the validator
	 * @return bool True if the field validates, false otherwise
	 */
	public static function email($name, $value, $args = null)
	{
		if(!filter_var($value, FILTER_VALIDATE_EMAIL))
		{
			self::$last_error = "Invalid email address `".$name."`: ".Backbone::dump($value);
			return false;
		}
		return true;
	}
	
	/**
	 * Validate an url (with path)
	 *	Ex: http://example.com
	 *
	 * @since 0.1.0
	 * @param string $name The name of the field being validated
	 * @param string $value The value of the field
	 * @param mixed $args Any additional args for the validator
	 * @return bool True if the field validates, false otherwise
	 */
	public static function url($name, $value, $args = null)
	{
		if(!filter_var($value, FILTER_VALIDATE_URL))
		{
			self::$last_error = "Invalid url `".$name."`: ".Backbone::dump($value);
			return false;
		}
		return true;
	}
	
	/**
	 * Require a minimum value
	 *	Ex: "min" => 0
	 *
	 * @since 0.1.0
	 * @param string $name The name of the field being validated
	 * @param string $value The value of the field
	 * @param mixed $args Any additional args for the validator
	 * @return bool True if the field validates, false otherwise
	 */
	public static function min($name, $value, $args = null)
	{
		if(intval($value) < $args) {
			self::$last_error = "Out of bounds error `".$name."`: ".Backbone::dump($value)." is less than ".$args;
			return false;
		}
		return true;
	}
	
	/**
	 * Require a maximum value
	 *	Ex: "max" => 25
	 *
	 * @since 0.1.0
	 * @param string $name The name of the field being validated
	 * @param string $value The value of the field
	 *@param mixed $args Any additional args for the validator
	 * @return bool True if the field validates, false otherwise
	 */
	public static function max($name, $value, $args = null)
	{
		if(intval($value) > $args) {
			self::$last_error = "Out of bounds error `".$name."`: ".Backbone::dump($value)." is greater than ".$args;
			return false;
		}
		return true;
	}
	
	/**
	 * Require a minimum string length
	 *	Ex: "minlength" => 10
	 *
	 * @since 0.1.0
	 * @param string $name The name of the field being validated
	 * @param string $value The value of the field
	 * @param mixed $args Any additional args for the validator
	 * @return bool True if the field validates, false otherwise
	 */
	public static function minlength($name, $value, $args = null)
	{
		if(strlen($value) < $args) {
			self::$last_error = "String length error `".$name."`: ".Backbone::dump($value)." is less than ".$args;
			return false;
		}
		return true;
	}
	
	/**
	 * Require a maximum string length
	 *	Ex: "maxlength" => 10
	 *
	 * @since 0.1.0
	 * @param string $name The name of the field being validated
	 * @param string $value The value of the field
	 * @param mixed $args Any additional args for the validator
	 * @return bool True if the field validates, false otherwise
	 */
	public static function maxlength($name, $value, $args = null)
	{
		if(strlen($value) > $args) {
			self::$last_error = "String length error `".$name."`: ".Backbone::dump($value)." is greater than ".$args;
			return false;
		}
		return true;
	}
	
	/**
	 * Value must be in the given array
	 *	Ex: "enum" => array(1, 2, 3, "apple")
	 *
	 * @since 0.1.0
	 * @param string $name The name of the field being validated
	 * @param string $value The value of the field
	 * @param mixed $args Any additional args for the validator
	 * @return bool True if the field validates, false otherwise
	 */
	public static function enum($name, $value, $args = null)
	{
		if(!in_array($value, $args)) {
			self::$last_error = "Error `".$name."`: ".Backbone::dump($value)." must be one of [".join(", ", $args)."]";
			return false;
		}
		return true;
	}
	
	/**
	 * Value is either 0 or 1
	 *
	 * @since 0.1.0
	 * @param string $name The name of the field being validated
	 * @param string $value The value of the field
	 * @param mixed $args Any additional args for the validator
	 * @return bool True if the field validates, false otherwise
	 */
	public static function binary($name, $value, $args = null)
	{
		return Validate::enum($name, $value, array("0", "1"));
	}
};

?>