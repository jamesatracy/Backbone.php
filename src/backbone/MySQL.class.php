<?php
/**
 * Backbone.php
 * 
 * @author	James Tracy <james.a.tracy@gmail.com>
 * @copyright	2012-2013
 * @license   http://www.opensource.org/licenses/mit-license.php MIT
 * @link https://github.com/jamesatracy/Backbone.php GitHub Page
 */

Backbone::uses("DataSource");

/**
 * Classes for connecting and interacting with a MySQL database.
 *
 * This module consists of the following classes:
 *	- MySQL				(MySQL implementation of DataSource)
 *	- MySQL_Logger		(Utility for logging MySQL quries to a log file)
 *
 * @since 0.1.0
 */
class MySQL extends DataSource 
{	
	/** @var connection The mysql database connection */
	protected $_connection = null;
	
	/** @var string An optional name for this connection */
	protected $_name = "";
	
	/** @var resource The last mysql result resource */
	protected $_result = null;
	
	/** @var string The last mysql error, if any */
	protected $_error = "";
	
	/** @var string The last mysql query */
	protected $_query = "";
		
	/** @var array An array of external hooks into the MySQL class */
	protected $_hooks = array();
	
	/**
	 * Connect to a MySQL database.
	 *
	 * @since 0.1.0
	 * @param array $options An array of data source specific options.
	 * @throws RuntimeException
	 */
	public function connect($options, $name = "")
	{
		parent::connect($options);

		array_merge(array(
			"server" => "localhost", 
			"user" => "root", 
			"pass" => "",
			"new_link" => false,
			"compress" => MYSQL_CLIENT_COMPRESS
			), $options
		);
		
		$this->_options = $options;
		$this->_name = $name;
		$this->_connection = mysql_connect($options['server'], $options['user'], $options['pass']);
		if(!$this->_connection) {
			throw new RuntimeException(mysql_error());
		}
	}
	
	/**
	 * Disconnect from a MySQL database.
	 *
	 * @since 0.1.0
	 */
	public function disconnect()
	{
		if($this->isConnected()) {
			$this->_is_connected = false;
			mysql_close($this->_connection);
		}
	}
	
	/**
	 * Determine whether or not there was an error generated by 
	 * the last executed query.
	 *
	 * @since 0.2.0
	 * @return bool True if there was an error.
	 */
	public function hasError()
	{
		return (!empty($this->_error));
	}
	
	/**
	 * Get the MySQL error, if any
	 *
	 * @since 0.1.0
	 * @return string The error string, if any
	 */
	public function getError()
	{
		return $this->_error;
	}
	
	/**
	 * Get the last query, if any
	 *
	 * @since 0.2.0
	 * @return string The last query, if any.
	 */
	public function getLastQuery()
	{
		return $this->_query;
	}
	
	/**
	 * Hook into the MySQL class.
	 *
	 * Currently supported hooks:
	 *	"table" => Called when a table name is being formatted
	 *
	 * @since 0.1.0
	 * @param string $name The hook name. See above.
	 * @param array $callback A valid parameter for call_user_func()
	 */
	public function hook($name, $callback)
	{
		$this->_hooks[$name] = $callback;
	}
	
	/**
	 * Describe a table schema
	 * 
	 * @since 0.1.0
	 * @param string $table The table name
	 *	Ex: "name" or "database.name"
	 * @return array The table description.
	 */
	public function describe($table)
	{
		if(!$this->isConnected()) {
			return array();
		}
		if(empty($table)) {
			return array();
		}
		
		$options['table'] = $table;
		return $this->query($this->buildQuery("describe", $options));
	}
	
	/**
	 * Return the table schema. For the data structure used for the schema,
	 * see the documentation for the Schema class.
	 *
	 * @since 0.2.0
	 * @param string $table The table name
	 * @return array The schema structure
	 * @throws RuntimeException
	 */
	public function schema($table)
	{
		if(!$this->isConnected()) {
			throw new RuntimeException("MySql: Invalid connection");
		}
		
		$id = 0;
		$fields = array();
		$result = $this->describe($table);
		foreach($result as $row) {
			$attrs = array();
			$field = $row['Field'];
			$type = $row['Type'];
			$null = $row['Null'];
			$default = $row['Default'];
			
			if($row['Key'] == "PRI") {
				// set the primary key
				$id = $field;
				$attrs['primary'] = true;
			}
			
			// format type
			if(substr($type, 0, 3) == "int" || substr($type, 0, 7) == "tinyint" || substr($type, 0, 8) == "smallint" || substr($type, 0, 9) == "mediumint" || substr($type, 0, 6) == "bigint") {
				// get size
				preg_match_all('/\((.*?)\)/', $type, $matches);
				$attrs["type"] = "integer";
				$attrs["size"] = substr($type, 0, strpos($type, "("));
				$attrs["length"] = $matches[1][0];
				
				if(stripos($type, "unsigned") !== false) {
					$attrs["unsigned"] = "1";
				} else {
					$attrs["unsigned"] = "0";
				}
				
				if($default == null && $null == "NO") {
					$default = "0";
				}
			} else if(substr($type, 0, 5) == "float" || substr($type, 0, 6) == "double") {
				// get size
				preg_match_all('/\((.*?)\)/', $type, $matches);
				$attrs["type"] = "float";
				$attrs["size"] = substr($type, 0, strpos($type, "("));
				$attrs["length"] = $matches[1][0];
			} else if(substr($type, 0, 7) == "varchar") {
				// get size
				preg_match_all('/\((.*?)\)/', $type, $matches);
				$attrs["type"] = "string";
				$attrs["length"] = $matches[1][0];
			} else if(substr($type, 0, 4) == "char") {
				// get size
				preg_match_all('/\((.*?)\)/', $type, $matches);
				$attrs["type"] = "char";
				$attrs["length"] = $matches[1][0];
			} else if(substr($type, 0, 4) == "text" || substr($type, 0, 8) == "longtext") {
				// get size
				$attrs["type"] = "string";
				$attrs["length"] = null;
			} else {
				$attrs["type"] = $type;
			}
			
			// null
			if($null == "NO") {
				$attrs["acceptNULL"] = '0';
			} else {
				$attrs["acceptNULL"] = '1';
			}
			
			// default
			$attrs["default"] = ($default == null ? "" : ($default == "NULL" ? null : $default));
			
			$fields[$field] = $attrs;
		}
		return array("id" => $id, "schema" => $fields);
	}
	
	/**
	 * CRUD: Read data from the mysql database.
	 *
	 * @since 0.2.0
	 * @param string $table The table name
	 * @param array $options Query options.
	 *	array(
	 *		"fields" => array("field1", "field2"),	// if unspecified, select all
	 *		"join" => array(
	 *			"table" => array(
	 *				"type" => "left", // default is "left" if not supplied
	 *				"fields" => array("field1", "field2")
	 *			)
	 *		),
	 *		"where" => array(
	 *			"field1" => "2", // default operator is AND
	 *			"OR" => array(
	 *				"field2" => array("LIKE", "Jones"),
	 *				"field3" => array("IN", array(1,2,4)),
	 *				"field4" => array("OR", 1, 2) // (field4 = '1' OR field4 = '2')
	 *			)
	 *		)
	 *	)
	 * @return array The data that was read.
	 */
	public function read($table, $options)
	{
		if(!$this->isConnected()) {
			return array();
		}
		if(empty($table)) {
			return array();
		}
		
		$options['table'] = $table;		
		return $this->query($this->buildQuery("select", $options));
	}
	
	/**
	 * Wrapper for calling read with COUNT(*). See read() for description
	 *
	 * @since 0.1.0
	 * @return int The number of rows
	 */
	public function count($table, $options)
	{
		$options = $this->_normalizeOptions($options);
		$options['fields'] = "COUNT(*)";
		$options['limit'] = null;
		$options['order_by'] = null;
		
		$result = $this->read($table, $options);
		if($this->hasError()) {
			return false;
		}
		if(count($result) == 0) {
			return false;
		}
		return $result[0]["COUNT(*)"];
	}
	
	/**
	 * CRUD: Create a record in the mysql database.
	 *
	 * @since 0.1.0
	 * @param string $table The table name
	 * @param array $data An array of key => value pairs to insert
	 * @return bool True if the creation succeeded.
	 */
	public function create($table, $data)
	{
		if(!$this->isConnected()) {
			$this->_error = "Connection not valid";
			return array();
		}
		if(empty($table)) {
			return array();
		}
		if(empty($data)) {
			return array();
		}
			
		$options['table'] = $table;
		$options['fields'] = $data;
		
		$this->query($this->buildQuery("insert", $options));
		return (!$this->hasError());
	}
	
	/**
	 * CRUD: Update a record in the mysql database.
	 *
	 * @since 0.1.0
	 * @param string $table The table name
	 * @param array $data An array of key => value pairs to update
	 * @param array $options An array of options, such as a where clause
	 * @return bool True if the creation succeeded.
	 */
	public function update($table, $data, $options)
	{
		if(!$this->isConnected()) {
			$this->_error = "Connection not valid";
			return array();
		}
		if(empty($table)) {
			return array();
		}
		if(empty($data)) {
			return array();
		}
		
		$options['table'] = $table;
		$options['fields'] = $data;
		
		$this->query($this->buildQuery("update", $options));
		return (!$this->hasError());
	}
	
	/** 
	 * CRUD: Delete data from a mysql database.
	 *
	 * @since 0.1.0
	 * @param string $table The table name
	 * @param array $options An array of options, such as a where clause
	 * @return bool True if the delete succeeded.
	 */
	public function delete($table, $options)
	{
		if(!$this->isConnected()) {
			$this->_error = "Connection not valid";
			return array();
		}
		if(empty($table)) {
			return array();
		}
		
		$options['table'] = $table;
		
		$this->query($this->buildQuery("delete", $options));
		return (!$this->hasError());
	}
	
	/**
	 * Query the database using a free text query
	 *
	 * @since 0.1.0
	 * @param string $query The SQL query to execute
	 * @return array An array of results.
	 */
	public function query($query)
	{
		if(!$this->isConnected()) {
			$this->_error = "Connection not valid";
			return array();
		}
		if(empty($query)) {
			return array();
		}
		
		$t = microtime(true);
		$this->_result = mysql_query($query, $this->_connection);
		$this->_error = mysql_error();
		$this->_query = $query;

		// do logging?
		if(Backbone::$config->get("mysql.log")) {
			$duration = round((microtime(true) - $t), 4);
			$num_rows = mysql_numrows($this->_result);
			MySQL_Logger::logQuery($this->_options['server'], $query, $duration, $num_rows, $this->_name);
		}
		
		// gather up all the rows
		$rows = array();
		if(!is_bool($this->_result)) {
			while($current = mysql_fetch_array($this->_result, MYSQL_ASSOC)) {
				$rows[] = $current;
			}
		}
		return $rows;
	}
	
	/**
	 * Get the primary key of the last record inserted
	 *
	 * @since 0.1.0
	 * @return int The primary key ID
	 */
	public function lastInsertID()
	{
		if(!$this->isConnected()) {
			return 0;
		}
		return mysql_insert_id($this->_connection);
	}
	
	/**
	 * Escapes a string by adding slashes to special chars
	 *
	 * @since 0.1.0
	 * @param [string] $string The string to escape
	 */
	public function escape($string)
	{
		if($string == null || empty($string) || !is_string($string)) {
			return $string;
		}
		if(!$this->isConnected()) {
			return addslashes($string);
		}
		if(function_exists("magic_quotes_gpc") && magic_quotes_gpc()) {
			stripslashes();
		}
		return mysql_real_escape_string($string);
	}
	
	/**
	 * Function for formatting mysql table names
	 *
	 * Internally calls format but allows for an external hook to preprocess
	 * the table name.
	 *
	 * @param string $table The table name
	 *	Ex: "name" or "database.name"
	 * @return string The formatted table name. Ex: "`database`.`name`"
	 */
	public function formatTable($name)
	{
		if(isset($this->_hooks['table'])/* && is_array($this->_hooks['table'])*/) {
			$name = call_user_func($this->_hooks['table'], $name);
		}
		return $this->format($name);
	}
	
	/**
	 * Function for formatting mysql table names or fields
	 *
	 * @since 0.1.0
	 * @param string $name The table or field name
	 *	Ex: "name" or "database.name"
	 * @return string The formatted table name. Ex: "`database`.`name`"
	 */
	public function format($name)
	{
		if(strpos($name, "(") !== false) {
            // handle functions
            $first = strpos($name, "(");
            $last = strpos($name, ")");
            $var = substr($name, $first + 1, ($last - $first - 1));
            if($var == "*") {
                return $name;
            } else {
				$str = array();
				$tmp = explode(",", $var);
				$str[] = $this->format(trim($tmp[0]));
				if(isset($tmp[1])) {
					$str[] = $this->format(trim($tmp[1]));
				}
                return substr($name, 0, $first + 1).join(",",$str).")";
            }
        }

		if(strpos($name, ".") !== false) {
			$tmp = explode(".", $name);
			if(count($tmp) == 3) {
				return ("`".$tmp[0]."`.`".$tmp[1]."`.`".$tmp[2]."`");
			} else {
				return ("`".$tmp[0]."`.`".$tmp[1]."`");
			}
		} else {
			if($name == "*") {
				return $name;
			}
			return "`".$name."`";
		}
	}
	
	/**
	 * Function that builds a MySQL query string given the action
	 * and an array of options.
	 *
	 * @since 0.2.0
	 * @param string $action select,insert,update,delete, or describe
	 * @param array $options An array of query options
	 * @return string The query string.
	 */
	public function buildQuery($action, $options)
	{
		if(!isset($options['table'])) {
			return "";
		}
		
		$query = "";
		$action = strtolower($action);
		$options = $this->_normalizeOptions($options);
		
		if($action === "select") {
			$query = $this->_buildSelect($options);
		} else if($action === "insert") {
			$query = $this->_buildInsert($options);
		} else if($action === "update") {
			$query = $this->_buildUpdate($options);
		} else if($action === "delete") {
			$query = $this->_buildDelete($options);
		} else if($action === "describe") {
			$query = $this->_buildDescribe($options);
		}
		
		return $query;
	}
	
	/**
	 * Internal function for normalizing the options data.
	 *
	 * @since 0.2.0
	 * @param array $options The options data.
	 * @return array The normalized options data.
	 */
	protected function _normalizeOptions($options = array())
	{
		$options = array_merge(array(
			"table" => null,
			"fields" => null,
			"where" => null,
			"join" => null, 
			"order_by" => null,
			"group_by" => null,
			"limit" => null,
			"offset" => null
		), (array)$options);
		return $options;
	}
	
	/**
	 * Internal function for building a select statement
	 * 
	 * @since 0.2.0
	 * @param array $options The query options
	 * @return string The select statement
	 */
	protected function _buildSelect($options)
	{
		$table = $options['table'];
		
		// command
		$sql = "SELECT ";
		
		// fields
		if($options['fields']) {
			$fields = $options['fields'];
			if(!is_array($fields)) {
				$fields = array($fields);
			}
			// loop over list of fields
			foreach($fields as $index => $field) {
				if($field == "COUNT(*)") {
					$fields[$index] = $field;
				} else {
					$fields[$index] = $this->format($field);
				}
			}
			$sql .= join(",", $fields);
		} else {
			// select all
			$sql .= "*";
		}
		
		// table
		$sql .= " FROM ".$this->formatTable($table);
		
		// joins
		if($options['join']) {
			$joins = "";
			foreach($options['join'] as $key => $value) {
				$type = "LEFT";
				if(isset($value['type'])) {
					$type = $value['type'];
				}
				if(!isset($value['fields'])) {
					return array();
				}
				$joins .= $type." JOIN ".$this->formatTable($key)." ON ".$this->format($value['fields'][0])." = ".$this->format($value['fields'][1])." ";
			}
			$sql .= " ".$joins;
		}
		
		// where
		if($options['where']) {
			$sql .= " ".$this->_formatWhere($options['where']);
		}
		
		// group by
		if($options['group_by']) {
			$sql .= " GROUP BY ".$this->format($options['group_by']);
		}
		
		// order by
		if($options['order_by']) {
			if(is_string($options['order_by'])) {
				$sql .= " ORDER BY ".$this->format($options['order_by'])." ASC";
			} else if(isset($options['order_by'][0])) {
				$sql .= " ORDER BY ".$this->format($options['order_by'][0])." ";
				if(isset($options['order_by'][1])) {
					$sql .= $options['order_by'][1];
				} else {
					$sql .= "ASC";
				}
			}
		}
		
		// limit
		if($options['limit']) {
			$sql .= " LIMIT ".$options['limit'];
		}
		
		// offset
		if($options['offset']) {
			$sql .= " OFFSET ".$options['offset'];
		}
		
		return $sql;
	}
	
	/**
	 * Internal function for building an insert statement.
	 *
	 * @since 0.2.0
	 * @param array $options The query options
	 * @return string The insert statement.
	 */
	protected function _buildInsert($options)
	{
		$table = $options['table'];
		$data = $options['fields'];
		
		$keys = array_keys($data);
		$values = array_values($data);
	
		// field names
		foreach($keys as $i => $key) {
			$keys[$i] = "`".$key."`";
		}
		
		// values
		foreach($values as $i => $val) {
			$values[$i] = $this->_formatValue($val);
		}
			
		$sql = sprintf("INSERT INTO %s (%s) VALUES (%s)", $this->formatTable($table), join(", ", $keys), join(", ", $values));
		
		return $sql;
	}
	
	/**
	 * Internal function for building an update statement.
	 *
	 * @since 0.2.0
	 * @param array $options The query options
	 * @return string The update statement.
	 */
	protected function _buildUpdate($options)
	{
		$table = $options['table'];
		$data = $options['fields'];
		
		$updates = array();
		foreach($data as $key => $value) {
			$value = $this->_formatValue($value);
			$updates[] = "`".$key."` = ".$value;
		}
			
		$sql = sprintf("UPDATE %s SET %s", $this->formatTable($table), join(", ", $updates));
		
		// where
		if($options['where']) {
			$sql .= " ".$this->_formatWhere($options['where']);
		}
		
		return $sql;
	}
	
	/**
	 * Internal functino for building a delete statement.
	 *
	 * @since 0.2.0
	 * @param array $options The query options
	 * @return string The delete statement.
	 */
	protected function _buildDelete($options)
	{
		$table = $options['table'];
		
		$sql = "DELETE FROM ".$this->formatTable($table);
		if(isset($options['where'])) {
			$sql .= " ".$this->_formatWhere($options['where']);
		}
		
		return $sql;
	}
	
	/**
	 * Internal functino for building a describe statement.
	 *
	 * @since 0.2.0
	 * @param array $options The query options
	 * @return string The describe statement.
	 */
	protected function _buildDescribe($options)
	{
		$table = $options['table'];
		$sql = "DESCRIBE ".$this->formatTable($table);
		return $sql;
	}
	
	/**
	 * Internal function for formatting values to be inserted/updated
	 * in the database.
	 *
	 * @since 0.2.0
	 * @param mixed $val The value.
	 * @return string The formatted value.
	 */
	protected function _formatValue($val)
	{
		// add quotes?
		if(!in_array($val, array("NOW()")))
			$val = "'".$this->escape($val)."'";
		return $val;
	}
	
	/**
	 * Internal function for formatting the where clause.
	 *
	 * @since 0.2.0
	 * @param array|string $conditions The where conditions.
	 * @return string The formatted where clause
	 */
	protected function _formatWhere($conditions)
	{
		if(is_array($conditions)) {
			// structured data
			$where = $this->_where($conditions);
		} else {
			// assume raw sql string
			$where = $conditions;
		}
		return "WHERE ".$where;
	}
	
	/**
	 * Internal function for composing a where clause from 
	 * structured data.
	 *
	 * @since 0.1.0
	 * @param array $where The array of conditions
	 * @param string $op The joining operator (AND, OR, NOT, XOR)
	 * @return string The combined where clause
	 */
	protected function _where($where, $op = "AND")
	{
		if(!in_array($op, array("AND", "OR", "NOT", "XOR"))) {
			return "";
		}
			
		$tmp = array();
		foreach($where as $key => $value) {
			if(in_array($key, array("AND", "OR", "NOT", "XOR"))) {
				// do a recursive combine
				$tmp[] = $this->_where($value, $key);
			} else {
				if(is_array($value)) {
					// index 0 holds the operator
					if($value[0] == "IN" || $value[0] == "NOT IN") {
						$in = $value[0];
						array_shift($value);
						if(is_array($value[0])) {
							$value = $value[0];
						}
						$tmp[] = $this->format($key)." ".$in." (".join(",", $value).")";
					} else if($value[0] == "OR") {
						// multiple conditions on the same field
						array_shift($value);
						$tmparr = array();
						foreach($value as $cond) {
							$tmparr[] = $this->format($key)." = '".$cond."'";
						}
						$tmp[] = "(".join(" OR ", $tmparr).")";
					} else {
						$tmp[] = $this->format($key)." ".$value[0]." '".$value[1]."'";
					}
				} else {
					// simple '='
					$tmp[] = $this->format($key). " = '".$value."'";
				}
			}
		}
		return "(".join(" ".$op." ", $tmp).")";
	}
};

// Default configurations
Backbone::$config->set("mysql.log", false);
Backbone::$config->set("mysql.logfile", "mysql.log");

/**
 * Class for logging MySQL queries.
 * 
 * To set mysql logging to true, Backbone::$config->set("mysql.log", true)
 * To change the log file, Backbone::$config->set("mysql.logfile", "mysql.log")
 * File name is relative to the application's web root and must be writable.
 *
 * Make a call to MySQL_Logger::clearQueryLog() at the beginning of execution to
 * flush the log file.
 *
 * Make a call to MySQL_Logger::tallyQueryLog() at the end of execution to flush
 * the log file.
 *
 * You can pause and resume logging activities if you need to skip logging certain
 * queries by calling MySQL_Logger::pause() and MySQL_Logger::resume().
 */
class MySQL_Logger
{
	/** @var int Number of quieries */
	protected static $_queries_count = 0;
	
	/** @var int Cumulative query time */
	protected static $_queries_time = 0;
	
	/** @var bool Whether or not the logging is paused */
	protected static $_paused = false;
	
	/**
	 * Log a mysql query
	 *
	 * To set mysql logging to true, Backbone::$config->set("mysql.log", true)
	 * To change the log file, Backbone::$config->set("mysql.logfile", "mysql.log")
	 * 	File name is relative to the application's web root.
	 *
	 * @since 0.1.0
	 * @param string $server The mysql connection server name
	 * @param string $sql The query string
	 * @param int $duration The time, in seconds, that the query took to execute
	 * @param int $num_rows The number of rows returned by the query
	 * @param string $name Optional name for this db connection
	 */
	public static function logQuery($server, $sql, $duration, $num_rows, $name = "")
	{
		if(self::$_paused) {
			return;
		}
			
		self::$_queries_count++;
		self::$_queries_time += $duration;

		$ob = "[".$server.($name ? " / ".$name : "")."]\r\n".$sql."\r\nNum Rows: ".$num_rows."\r\nDuration: ".$duration." seconds\r\n";
		if(mysql_error()) {
			$ob .= "Error: ".mysql_error()."\r\n";
		}
		$ob .= "\r\n";
		file_put_contents(APPPATH.Backbone::$config->get("mysql.logfile"), $ob, FILE_APPEND);
	}
	
	/**
	 * Writes the current running totals to the end of the query log.
	 *
	 * @since 0.1.0
	 */
	public static function tallyQueryLog()
	{
		if(Backbone::$config->get("mysql.log") == true) {
			if(file_exists(APPPATH.Backbone::$config->get("mysql.logfile"))) {
				$ob = "----------------------------------------------------------------\r\n"; 
				$ob .= "Total Queries: ".self::$_queries_count."\r\n";
				$ob .= "Total Duration: ".self::$_queries_time." seconds\r\n";
				$ob .= "----------------------------------------------------------------\r\n"; 
				$ob .= "Active DB Connections: ".join(", ", Connections::enumerateConnections())."\r\n";
				$ob .= "----------------------------------------------------------------\r\n\r\n"; 
				file_put_contents(APPPATH.Backbone::$config->get("mysql.logfile"), $ob, FILE_APPEND);
			}
		}
	}
	
	/**
	 * Clear the mysql log file if mysql logging is set to true.
	 *
	 * To set mysql logging to true, Backbone::$config->set("mysql.log", true)
	 * To change the log file, Backbone::$config->set("mysql.logfile", "mysql.log")
	 *	File name is relative to the application's web root.
	 *
	 * @since 0.1.0
	 */
	public static function clearQueryLog()
	{
		self::$_queries_count = 0;
		self::$_queries_time = 0;
		
		if(Backbone::$config->get("mysql.log") == true) {
			if(file_exists(APPPATH.Backbone::$config->get("mysql.logfile"))) {
				file_put_contents(APPPATH.Backbone::$config->get("mysql.logfile"), "");
			}
		}
	}
	
	/**
	 * Get the current running total query count 
	 *
	 * @since 0.1.0
	 */
	public static function getQueryCount()
	{
		return self::$_queries_count;
	}
	
	/**
	 * Get the current running total query time in milliseconds 
	 *
	 * @since 0.1.0
	 */
	public static function getQueryTime()
	{
		return self::$_queries_time;
	}
	
	/**
	 * Pause the query logging. Call resume() to recommence 
	 *
	 * @since 0.1.0
	 */
	public static function pause()
	{
		self::$_paused = true;
	}
	
	/**
	 * Resume query logging 
	 *
	 * @since 0.1.0
	 */
	public static function resume()
	{
		self::$_paused = false;
	}
}
?>